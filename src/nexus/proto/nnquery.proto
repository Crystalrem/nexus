syntax = "proto3";
package nexus;

enum Framework {
  UNKNOWN = 0;
  DARKNET = 1;
  CAFFE = 2;
  TENSORFLOW = 3;
}

message RectProto {
  uint32 left = 1;
  uint32 top = 2;
  uint32 right = 3;
  uint32 bottom = 4;
}

message ImageProto {
  enum ImageFormat {
    JPEG = 0;
    PNG = 1;
    GIF = 2;
  }
  bytes data = 1;
  ImageFormat format = 2;
  bool color = 3;
}

enum DataType {
  DT_UNKNOWN = 0; 
  DT_BOOL = 1;
  DT_INT = 2;
  DT_FLOAT = 3;
  DT_DOUBLE = 4;
  DT_STRING = 5;
  DT_TENSOR = 10;
  DT_IMAGE = 11;
  DT_RECT = 12;
}

message TensorProto {
  // Shape of tensor
  repeated uint32 shape = 1;
  // Data type can only be int8, int32, float, double, or string
  DataType data_type = 2; 
  // Exact ONE of the following fields must be present 
  repeated bool bools = 10;      // bool tensor
  repeated int32 ints = 11;      // int tensor
  repeated float floats = 12;    // float tensor
  repeated double doubles = 13;  // double tensor
  repeated bytes strings = 14;   // string tensor
}

message ValueProto {
  // name of value
  string name = 1;
  DataType data_type = 2;
  
  // Exact ONE of the following fields must be present.
  bool b = 10;             // bool
  int32 i = 11;            // int
  float f = 13;            // float
  double d = 14;           // double
  bytes s = 15;            // string
  
  TensorProto tensor = 20; // tensor
  ImageProto image = 21;   // image
  RectProto rect = 22;     // bbox
}

message RecordProto {
  repeated ValueProto named_value = 1;
}

message RequestProto {
  // User ID
  uint32 user_id = 1;
  // Request ID
  uint32 req_id = 2;
  // Input
  ValueProto input = 3;
}

message ReplyProto {
  // User ID
  uint32 user_id = 1;
  // Request ID
  uint32 req_id = 2;
  // status
  int32 status = 3;
  // Error message
  string error_message = 4;
  // Output
  repeated RecordProto output = 5;
}

message ModelSession {
  // Framework
  Framework framework = 1;
  // Model name
  string model_name = 2;
  // Model version
  uint32 version = 3;
  // Latency SLA in millisecond
  uint64 latency_sla = 4;
  // Specify image height and width for models whose input are resizable,
  // otherwise ignored
  uint32 image_height = 10;
  uint32 image_width = 11;
}

message QueryProto {
  uint32 query_id = 1;
  // Model session ID
  string model_session_id = 2;
  ValueProto input = 3;
  uint32 topk = 10;
  repeated RectProto window = 11;
  repeated string output_field = 12;
  // Threshold for confidence, default is 0
  repeated ValueProto filter = 13;
  // Show breakdown latency in the result
  bool debug = 100;
}

message QueryResultProto {
  // Query ID
  uint32 query_id = 1;
  // Model session ID
  string model_session_id = 2;
  // status
  int32 status = 3;
  // Error message
  string error_message = 4;
  // Output
  repeated RecordProto output = 5;
}

/*
message Result {
  // User ID
  uint32 user_id = 1;
  // Request ID
  uint32 req_id = 2;
  // Error code, 0 means sucess
  int32 error_code = 3;
  // Error message
  string error_message = 4;
  
  // Classification result, one per rectangle if set in the query,
  // or only one for entire image
  repeated ClassificationResult classification_result = 7;
  // Descriptor result, one per rectangle if set in the query,
  // or only one for entire image
  repeated DescriptorResult descriptor_result = 9;
  // Detection result, one per detected region
  repeated DetectionResult detection_result = 8;
  // Caption result, one per interest region
  repeated CaptionResult caption_result = 10;
  
  // Request processing latency in millisecond
  uint64 latency = 100;
  // Breakdown latency for each backend only when debug is true in the query
  repeated BackendLatency backend_latency = 101;
}

message ClassificationResult {
  // Top 1 class ID
  int32 top1_class_id = 1;
  // Top 1 class probability
  float top1_class_prob = 2;
  // Top 1 class name
  string top1_class_name = 3;
  // Corresponding rectangle if set in the query
  Rect rect = 10;
  // All class ids with non-zero probability.
  // Only return when verbose set to true in the query.
  repeated int32 class_id = 100 [packed = true];
  // All non-zero probability corresponding to class ids.
  // Only return when verbose set to true in the query.
  repeated float prob = 101 [packed = true];
}

message DescriptorResult {
  //Note: Field name "descriptor" is reserved by protobuf. Don't use it.
  repeated float descript = 1 [packed = true];
  // Corresponding rectangle if set in the query
  Rect rect = 10;
}

message DetectionResult {
  // Bounding box for detected object in the image
  Rect rect = 1;
  // Confidence in objectness
  float objectness = 2;
  // Top 1 class ID
  int32 top1_class_id = 3;
  // Top 1 class probability
  float top1_class_prob = 4;
  // Top 1 class name
  string top1_class_name = 5;
  
  // Classification result for nested query
  ClassificationResult classification_result = 10;
}

message CaptionResult {
  // Bounding box for interest region in the image
  Rect rect = 1;
  // Caption for the region
  string caption = 2;
  // Confidence score
  float score = 3;
}

message BackendLatency {
  // Model session ID
  string model_session_id = 1;
  // Batching time
  uint64 batch_time = 2;
  // Processing time
  uint64 process_time = 3;
  // Number of inputs contained in the request
  int32 num_inputs = 10;
}*/